
import pandas as pd
from graphviz import Digraph
import sqlite3

# Path to your SQLite database file
db_path = "code.db"
out_path = "img/db.png"
# Visualize the Database table 
def visualize_tables(database_path, output_file="visualize_tables.tmp"):
    try:
        # Connect to the SQLite database
        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()

        # Retrieve all table names
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]

        # Create a Graphviz Digraph
        dot = Digraph(format="png")
        dot.attr(rankdir="LR")

        # Add each table as a square node
        for table in tables:
            dot.node(table, label=table, shape="box")

        # Render the graph to a file
        dot.render(output_file, view=True)
        print(f"Visualization saved to {output_file}.png")

    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()


# Visualize the Database table with the columns
def visualize_tables_with_cols(database_path, output_file="visualize_tables_with_cols.tmp"):
    try:
        # Connect to the SQLite database
        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()

        # Retrieve all table names
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]

        # Create a Graphviz Digraph
        dot = Digraph(format="png")
        dot.attr(rankdir="LR")

        # Add each table with its columns as a node
        for table in tables:
            cursor.execute(f"PRAGMA table_info({table});")
            columns = [row[1] for row in cursor.fetchall()]  # Get column names

            # Create a label for the node with HTML-like syntax
            label = f"""<
                <TABLE BORDER="1" CELLBORDER="1" CELLSPACING="0">
                    <TR><TD><B>{table}</B></TD></TR>
                    {"".join(f"<TR><TD>{column}</TD></TR>" for column in columns)}
                </TABLE>
            >"""
            dot.node(table, label=label, shape="plaintext")

        # Render the graph to a file
        dot.render(output_file, view=True)
        print(f"Visualization saved to {output_file}.png")

    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()


# Visualize the Database table with primary keys links
def visualize_tables_with_links(database_path, project_name, output_file="visualize_tables_with_links.tmp"):
    try:
        # Connect to the SQLite database
        conn = sqlite3.connect(database_path)
        cursor = conn.cursor()

        # Retrieve all table names
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]

        # Create a Graphviz Digraph
        dot = Digraph(format="png")
        dot.attr(rankdir="LR")

        table_columns = {}
        foreign_keys = []

        for table in tables:
            # Fetch columns
            cursor.execute(f"PRAGMA table_info({table});")
            columns = cursor.fetchall()
            table_columns[table] = columns

            # Fetch foreign keys
            cursor.execute(f"PRAGMA foreign_key_list({table});")
            foreign_keys.extend([(table, fk[2], fk[3], fk[4]) for fk in cursor.fetchall()])

            # Create a label for the node with HTML-like syntax
            label = f"""<
                <TABLE BORDER="1" CELLBORDER="1" CELLSPACING="0">
                    <TR><TD><B>{table}</B></TD></TR>
                    {"".join(
                        f"<TR><TD>{col[1]}{' (PK)' if col[5] else ''}</TD></TR>"
                        for col in columns
                    )}
                </TABLE>
            >"""
            dot.node(table, label=label, shape="plaintext")

        # Add edges for foreign key relationships
        for source_table, target_table, source_column, target_column in foreign_keys:
            dot.edge(f"{source_table}", f"{target_table}", label="FK")

        # Add footer node
        footer_label = f"""<
            <TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0">
                <TR><TD ALIGN="LEFT">{project_name}</TD></TR>
                <TR><TD ALIGN="LEFT">Â© Generated by Guillaume Plante &lt;codegp@icloud.com&gt;</TD></TR>
            </TABLE>
        >"""
        dot.node("footer", label=footer_label, shape="plaintext")

        # Position footer at the bottom
        with dot.subgraph() as g:
            g.attr(rank="sink")  # Ensure the footer is at the bottom
            g.node("footer")

        # Render the graph to a file
        dot.render(output_file, view=True)
        print(f"Visualization saved to {output_file}.png")

    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()


#visualize_tables(db_path)
#visualize_tables_with_cols(db_path)
# Replace with the path to your SQLite database
visualize_tables_with_links(db_path,'odb2-insights',out_path)
